- name: Add ArgoCD Helm repo
  kubernetes.core.helm_repository:
    name: argo
    repo_url: "https://argoproj.github.io/argo-helm"

- name: Create namespace argocd for ArgoCD install
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ argocd_namespace }}"
  
- name: Install latest ArgoCD chart
  kubernetes.core.helm:
    name: ecostream-argo
    chart_ref: argo/argo-cd
    release_namespace: "{{ argocd_namespace }}"
    values:
# disable ArgoCD internal HTTP redirect (safe because encryption is handled by ALB)
# otherwise there's an infinite redirect loop ALB <-> ArgoCD
      configs:
        params:
          "server.insecure: true"
    # we used to deploy an Ingress with these values, but the Ingress was not accessible from outside of the VPC
    # so now we deploy an Ingress manually
    # there must be a way to configure that with ArgoCD Helm chart, though
    #  global:
    #     domain: "{{ lookup('env', 'ECOSTREAM_HOSTNAME') }}"
    #   server:
    #     ingress:
    #       enabled: true
    #       controller: aws
    #       ingressClassName: alb
    #       annotations:
    #         alb.ingress.kubernetes.io/scheme: internal
    #         alb.ingress.kubernetes.io/target-type: ip
    #         alb.ingress.kubernetes.io/backend-protocol: HTTP
    #         alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}, {"HTTPS":443}]'
    #         alb.ingress.kubernetes.io/ssl-redirect: '443'
    #       aws:
    #         serviceType: ClusterIP
    #         backendProtocolVersion: GRPC

# TODO: ingress returns 502 Bad Gateway at first
# We need to run the following command to make it work:
# helm upgrade --install ecostream-argo argo/argo-cd --namespace argocd --set config.params.server.insecure=true
# might be caused by this: https://github.com/argoproj/argo-helm/issues/1780
- name: Deploy ArgoCD server Ingress
  kubernetes.core.k8s:
    state: present
    template:
      path: '../templates/argocd-server-ingress.yml.j2'

- name: Provide ArgoCD with GitLab token so it can access GitOps repo
  kubernetes.core.k8s:
    state: present
    template:
      path: '../templates/argocd-repository-secret.yml.j2'

- name: Deploy Ecostream Application
  kubernetes.core.k8s:
    state: present
    template:
      path: '../templates/ecostream-application.yml.j2'
