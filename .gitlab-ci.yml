stages:
- tofu-validate
- tofu-plan
- tofu-apply
- tofu-destroy
- ansible-configure

variables:
  TOFU_IMAGE: "registry.gitlab.com/components/opentofu/gitlab-opentofu:1.1.0-opentofu1.9.0-alpine"
  ANSIBLE_IMAGE: "registry.gitlab.com/gkermo/ecostream/base_images/alpine-ansible:2.17.0-amd64"
  TOFU_DIR: "tofu-infrastructure-provisioning"
  ANSIBLE_DIR: "ansible-environment-configuration"
  TF_VAR_aws_region: $AWS_DEFAULT_REGION
  TF_VAR_env_name: $ENV_NAME
  TF_VAR_route_53_zone_id: $ROUTE_53_ZONE_ID
  # TF_LOG: DEBUG

.tofu_before_script: &tofu_before_script
  before_script:
  - |
    echo "Executing before_script..."
    apk add --no-cache python3 py3-pip
    python3 -m venv /tmp/venv
    . /tmp/venv/bin/activate
    pip install --upgrade pip
    pip install awscli
    aws --version
    cd $TOFU_DIR
    tofu --version
    tofu init -backend-config="address=https://gitlab.com/api/v4/projects/68895536/terraform/state/${ENV_NAME}" \
      -backend-config="lock_address=https://gitlab.com/api/v4/projects/68895536/terraform/state/${ENV_NAME}/lock" \
      -backend-config="unlock_address=https://gitlab.com/api/v4/projects/68895536/terraform/state/${ENV_NAME}/lock" \
      -backend-config="lock_method=POST" \
      -backend-config="unlock_method=DELETE" \
      -backend-config="username=${GITLAB_USERNAME}" \
      -backend-config="password=${GITLAB_TOKEN}"
    echo "Done executing before_script..."

tofu-validate:
  image: $TOFU_IMAGE
  stage: tofu-validate
  <<: *tofu_before_script
  script:
  - tofu validate

tofu-plan:
  image: $TOFU_IMAGE
  stage: tofu-plan
  <<: *tofu_before_script
  script:
  - |
    . /tmp/venv/bin/activate
    tofu plan -input=false
  artifacts:
    paths:
    - $TOFU_DIR/planfile
    when: always

tofu-apply:
  image: $TOFU_IMAGE
  stage: tofu-apply
  <<: *tofu_before_script
  script:
  - |
    . /tmp/venv/bin/activate
    tofu apply -auto-approve -input=false
  when: manual

tofu-destroy:
  image: $TOFU_IMAGE
  stage: tofu-destroy
  <<: *tofu_before_script
  script:
  - tofu destroy -auto-approve -input=false
  when: manual

ansible-configure:
  image: $ANSIBLE_IMAGE
  before_script:
  - |
    echo "Executing before_script..."
    cd $ANSIBLE_DIR
    apk add --no-cache python3 py3-pip
    python3 -m venv /tmp/venv
    . /tmp/venv/bin/activate
    pip install --upgrade pip
    pip install openshift kubernetes
    pip install awscli
    aws --version
    apk add --update --no-cache wget git curl bash yq openssl
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
    ansible-galaxy collection install community.aws
    ansible-galaxy collection install kubernetes.core
    echo "Done executing before_script..."
  stage: ansible-configure
  script:
  - |
    echo "Executing script..."
    . /tmp/venv/bin/activate
    # need to specify a custom inventory file so Ansible uses the right Python interpreter
    ansible-playbook -i ./inventory/gitlab-inventory.ini playbook.yml
    echo "Done executing script..."
  when: manual
